{"version":3,"sources":["components/Board.js","components/Settings.js","components/Home.js","components/About.js","components/Practice.js","App.js","serviceWorker.js","index.js"],"names":["game","Chess","orientations","Timer","props","class","style","time","color","display","Board","newPosition","orientation","Math","floor","random","randomGameIndex","PGNData","length","load_pgn","data","history","reset","randomMoveIndex","i","initMove","nextMove","lastFullMove","move","setState","fen","initMoveData","nextMoveData","nextMoveColor","setTimeout","makeInitMove","updateSquareStyling","state","undo","console","log","squareStyles","from","backgroundColor","to","onDrop","sourceSquare","targetSquare","piece","toUpperCase","timed","callbackDisableSettings","answer","correctMoves","correct","incorrect","allowDrag","charAt","onAnimationEnd","timerCount","this","interval","setInterval","finalBoardProps","position","showNotation","calcWidth","callbackEnd","prevProps","clearInterval","id","icon","whiteCircle","blackCircle","className","Component","Settings","onChangeOrientation","bind","onChangeNotation","event","target","value","callbackSettings","checked","onChange","type","name","defaultChecked","disabled","screenWidth","screenHeight","Home","currentState","handleStart","draggable","onClick","renderSwitch","About","href","Practice","disableSettings","marginTop","App","basename","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6+gwBASMA,G,MAAO,IAAIC,GACXC,EAAe,CAAC,QAAS,SAmO/B,SAASC,EAAMC,GACb,OACE,yBACEC,MAAM,kBACNC,MAAOF,EAAMG,KAAO,GAAK,CAACC,MAAO,MAAOC,QAASL,EAAMK,SAAW,CAACA,QAASL,EAAMK,UAClF,6BAAML,EAAMG,OAMHG,M,kDA1Ob,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IA+DRO,YAAc,WAAO,IAAD,EACdC,EAAc,KAEhBA,EAD6B,WAA3B,EAAKR,MAAMQ,YACCV,EAAaW,KAAKC,MAAsB,EAAhBD,KAAKE,WAE7B,EAAKX,MAAMQ,YAE3B,IAAII,EAAkBH,KAAKC,MAAMD,KAAKE,SAAWE,EAAQC,QACzDlB,EAAKmB,SAASF,EAAQD,GAAiBI,MACvC,IAAIC,EAAUrB,EAAKqB,UAGnB,GAAGA,EAAQH,QAAU,EACnB,KAAMG,EAAQH,QAAU,GACtBF,EAAkBH,KAAKC,MAAMD,KAAKE,SAAWE,EAAQC,QACrDlB,EAAKmB,SAASF,EAAQD,GAAiBI,MACvCC,EAAUrB,EAAKqB,UAGnBrB,EAAKsB,QAGL,IAAIC,EAAmC,UAAhBX,EAC+C,EAApEC,KAAKC,MAAMD,KAAKE,SAAYF,KAAKC,OAAOO,EAAQH,OAAS,GAAK,IAAU,EACJ,EAApEL,KAAKC,MAAMD,KAAKE,SAAYF,KAAKC,OAAOO,EAAQH,OAAS,GAAK,IAG7B,QAA/BG,EAAQE,EAAgB,IAA+C,UAA/BF,EAAQE,EAAgB,KAChEA,GAAmBA,EAAkB,GAAKF,EAAQH,QAGtD,IAIIM,EAJEC,EAAWJ,EAAQE,GACnBG,EAAWL,EAAQE,EAAgB,GAIrCI,EAAe,GACjB,IAAKH,EAAI,EAAGA,EAAKD,EAAkBC,IACjCG,EAAe3B,EAAK4B,KAAKP,EAAQG,IAGrC,EAAKK,UAAL,GACEC,IAAK9B,EAAK8B,MACVd,gBAAiBA,EACjBO,gBAAiBA,EACjBE,SAAUA,EACVM,aAAc,GACdL,SAAUA,EACVM,aAAc,GACdC,cAAe,GACfZ,QAASA,GATX,8BAUwC,MAAvBM,EAAanB,MAAgB,QAAU,SAVxD,6BAWgB,IAXhB,uBAYU,IAZV,4BAaeI,GAbf,IAgBAsB,YAAW,kBAAM,EAAKC,iBAAgB,KACtCD,YAAW,kBAAM,EAAKE,wBAAuB,MA1H5B,EA8HnBD,aAAe,WACb,IAAMJ,EAAgB/B,EAAK4B,KAAK,EAAKS,MAAMZ,UACrCO,EAAehC,EAAK4B,KAAK,EAAKS,MAAMX,UAC1C1B,EAAKsC,OACL,EAAKT,SAAS,CAAEC,IAAK9B,EAAK8B,MAAOC,aAAcA,EAAcC,aAAcA,KAlI1D,EAsInBI,oBAAsB,WACpBG,QAAQC,IAAI,EAAKH,OACjB,IAAII,EAAe,GACnBA,EAAa,EAAKJ,MAAMN,aAAaW,MAAQ,CAACC,gBAAiB,wBAC/DF,EAAa,EAAKJ,MAAMN,aAAaa,IAAM,CAACD,gBAAiB,wBAC7D,EAAKd,SAAS,CAAEY,aAAcA,KA3Ib,EA+InBI,OAAS,YAA4C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,MAClC,EAAKX,MAAML,aAAaU,OAASI,GAC/B,EAAKT,MAAML,aAAaY,KAAOG,GAC9B,EAAKV,MAAML,aAAaxB,MAAQ,EAAK6B,MAAML,aAAagB,MAAMC,gBAAmBD,GAChF,EAAK5C,MAAM8C,OACb,EAAK9C,MAAM+C,yBAAwB,GAErCnD,EAAK4B,KAAK,EAAKS,MAAMX,UACrB,EAAKG,SAAS,CACZuB,OAAQ,UACRtB,IAAK9B,EAAK8B,MACVuB,aAAc,EAAKhB,MAAMgB,aAAa,EACtCC,SAAS,KAEDR,IAAiBC,GAG1B,EAAKlB,SAAS,CAAEuB,OAAQ,YAAaG,WAAW,KAhKpC,EAqKnBC,UAAY,YACV,OADyB,EAAZR,MACHS,OAAO,KAAO,EAAKpB,MAAML,aAAaxB,OAtK/B,EA8KnBkD,eAAiB,WACX,EAAKrB,MAAMiB,UACb,EAAKzB,SAAS,CAAE0B,WAAW,EAAOD,SAAS,IAC3C,EAAK3C,eAEP,EAAKkB,SAAS,CAAE0B,WAAW,EAAOD,SAAS,IAEvC,EAAKlD,MAAM8C,OACbhB,YAAW,WACT,EAAK9B,MAAM+C,yBAAwB,KAClC,MAtLL,EAAKd,MAAQ,CACXP,IAAK,QACLd,gBAAiB,EACjBO,gBAAiB,EACjBE,SAAU,GACVM,aAAc,GACdL,SAAU,GACVM,aAAc,GACdX,QAAS,GACTY,cAAe,GACfQ,aAAc,GACdW,OAAQ,GACRC,aAAc,EACd9C,KAAM,GACNoD,WAAY,EACZJ,WAAW,EACXD,SAAS,GAlBM,E,gEAwBE,IAAD,OAClBM,KAAKjD,cAEFiD,KAAKxD,MAAM8C,QACZU,KAAKC,SAAWC,aAAY,kBAAM,EAAKjC,SAAS,CAAE8B,WAAY,EAAKtB,MAAMsB,WAAW,MAAM,KAG1FzB,YAAW,WACT,IAAM6B,EAAkB,CACtBC,SAAU,EAAK3B,MAAMP,IACrBW,aAAc,EAAKJ,MAAMI,aACzBe,UAAW,kBAAM,GACjBS,aAAc,EAAK7D,MAAM6D,aACzBrD,YAAwC,WAA3B,EAAKR,MAAMQ,YAA2B,EAAKyB,MAAMzB,YAAc,EAAKR,MAAMQ,YACvFsD,UAAW,EAAK9D,MAAM8D,WAExB,EAAK9D,MAAM+D,YACT,EAAK9B,MAAMgB,aACXU,KACiB,IAAlBH,KAAKvB,MAAM9B,S,yCAIC6D,GACbR,KAAKxD,MAAM8C,OACVU,KAAKxD,MAAMQ,cAAgBwD,EAAUxD,aACtCgD,KAAKjD,gB,6CAMNiD,KAAKxD,MAAM8C,OACZmB,cAAcT,KAAKC,Y,+BAsIrB,IAAMN,EAAYK,KAAKvB,MAAMkB,UACvBD,EAAUM,KAAKvB,MAAMiB,QAE3B,OACE,6BACE,kBAACnD,EAAD,CACEI,KAAMqD,KAAKvB,MAAM9B,KAAOqD,KAAKvB,MAAMsB,WACnClD,QAASmD,KAAKxD,MAAM8C,MAAQ,QAAU,SACxC,kBAAC,IAAD,CACEc,SAAUJ,KAAKvB,MAAMP,IACrBW,aAAcmB,KAAKvB,MAAMI,aACzBI,OAAQe,KAAKf,OACbW,UAAWI,KAAKJ,UAChBS,aAAcL,KAAKxD,MAAM6D,aACzBrD,YAAwC,WAA3BgD,KAAKxD,MAAMQ,YAA2BgD,KAAKvB,MAAMzB,YAAcgD,KAAKxD,MAAMQ,YACvFsD,UAAWN,KAAKxD,MAAM8D,YAExB,yBACAI,GAAG,cAC6B,UAA7BV,KAAKvB,MAAMJ,cAA4B,kBAAC,IAAD,CAAiBsC,KAAMC,MAAkB,kBAAC,IAAD,CAAiBD,KAAME,MACxG,mCACA,0BACAf,eAAgBE,KAAKF,eACrBgB,UAAWnB,EAAY,YAAeD,EAAU,UAAY,IACzDM,KAAKvB,MAAMX,gB,GAzNJiD,aCgDLC,G,wDAxDb,aAAe,IAAD,8BACZ,gBACKvC,MAAQ,CACXzB,YAAa,QACbqD,cAAc,GAEhB,EAAKY,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPZ,E,gEAUME,GAAQ,IAAD,OACzBpB,KAAK/B,SAAS,CAAEjB,YAAaoE,EAAMC,OAAOC,QAAS,WACjD,EAAK9E,MAAM+E,iBACT,EAAK9C,MAAMzB,YACX,EAAKyB,MAAM4B,mB,uCAIAe,GAAQ,IAAD,OACtBpB,KAAK/B,SAAS,CAAEoC,aAAce,EAAMC,OAAOG,UAAW,WACpD,EAAKhF,MAAM+E,iBACT,EAAK9C,MAAMzB,YACX,EAAKyB,MAAM4B,mB,+BAMf,OACE,yBAAK5D,MAAM,oBAAoBC,MAAOsD,KAAKxD,MAAME,OAC/C,yBAAKD,MAAM,wBAAwBgF,SAAUzB,KAAKiB,qBAChD,2BAAOxE,MAAM,mBAAb,QACE,2BAAOiF,KAAK,QAAQJ,MAAM,QAAQK,KAAK,cAAcC,gBAAc,EAACC,SAAU7B,KAAKxD,MAAMqF,WACzF,0BAAMpF,MAAM,eAEd,2BAAOA,MAAM,mBAAb,QACE,2BAAOiF,KAAK,QAAQJ,MAAM,QAAQK,KAAK,cAAcE,SAAU7B,KAAKxD,MAAMqF,WAC1E,0BAAMpF,MAAM,eAEd,2BAAOA,MAAM,mBAAb,SACE,2BAAOiF,KAAK,QAAQJ,MAAM,SAASK,KAAK,cAAcE,SAAU7B,KAAKxD,MAAMqF,WAC3E,0BAAMpF,MAAM,gBAIhB,yBAAKA,MAAM,4BACT,2BAAOA,MAAM,sBAAb,mBACE,2BAAOiF,KAAK,WAAWD,SAAUzB,KAAKmB,iBAAkBU,SAAU7B,KAAKxD,MAAMqF,WAC7E,0BAAMpF,MAAM,qB,GAjDDsE,cCIjBT,G,MAAY,SAAC,GAAmC,IAAjCwB,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OAAQD,GAAeC,GAAgB,MAASD,GAAeC,GAAgB,IAAMD,EAAc,IAAO,MAuG7FE,E,kDAnGb,WAAYxF,GAAQ,IAAD,8BACjB,cAAMA,IAwER+D,YAAc,SAACd,EAAcU,GAC3B,EAAKlC,SAAS,CACZwB,aAAcA,EACdU,gBAAiBA,EACjB8B,aAAc,WA7EC,EAgFnBV,iBAAmB,SAACvE,EAAaqD,GAC/B,EAAKpC,SAAS,CACZjB,YAAaA,EACbqD,aAAcA,KAjFhB,EAAK5B,MAAQ,CACXwD,aAAc,OACdjF,YAAa,QACbqD,cAAc,GAEhB,EAAK6B,YAAc,EAAKA,YAAYhB,KAAjB,gBAPF,E,yDAUNzC,GACX,OAAOA,GAEL,IAAK,OACH,OACE,yBAAKhC,MAAM,kBAAX,yBAEE,kBAAC,IAAD,CACA0F,WAAW,EACX/B,SAAS,QACTpD,YAAwC,WAA3BgD,KAAKvB,MAAMzB,YAA2B,QAAUgD,KAAKvB,MAAMzB,YACxEqD,aAAcL,KAAKvB,MAAM4B,aACzBC,UAAWA,IAEX,4BAAQ7D,MAAM,eAAe2F,QAASpC,KAAKkC,aAA3C,SATF,IAUE,kBAAC,IAAD,CAAMlD,GAAG,aACP,4BAAQvC,MAAM,mBAAd,aAXJ,IAaE,kBAAC,IAAD,CAAMuC,GAAG,UACP,4BAAQvC,MAAM,gBAAd,WAKR,IAAK,SACH,OACE,6BACE,kBAAC,EAAD,CACA8D,YAAaP,KAAKO,YAClBvD,YAAagD,KAAKvB,MAAMzB,YACxBqD,aAAcL,KAAKvB,MAAM4B,aACzBC,UAAWA,EACXhB,OAAO,KAIb,IAAK,QACH,OACE,yBAAK7C,MAAM,mBAAX,UACUuD,KAAKvB,MAAMgB,aADrB,SAEE,kBAAC,IAAD,iBACIO,KAAKvB,MAAM0B,gBADf,CAEAnD,YAAwC,WAA3BgD,KAAKvB,MAAMzB,YAA2B,QAAUgD,KAAKvB,MAAMzB,YACxEqD,aAAcL,KAAKvB,MAAM4B,aACzBC,UAAWA,KAEX,4BAAQ7D,MAAM,eAAe2F,QAASpC,KAAKkC,aAA3C,SARF,IASE,kBAAC,IAAD,CAAMlD,GAAG,aACP,4BAAQvC,MAAM,mBAAd,aAVJ,IAYE,kBAAC,IAAD,CAAMuC,GAAG,UACP,4BAAQvC,MAAM,gBAAd,c,kCAQA2E,GACVpB,KAAK/B,SAAS,CAAEgE,aAAc,a,+BAkB9B,OACE,6BACGjC,KAAKqC,aAAarC,KAAKvB,MAAMwD,cAC9B,kBAAC,EAAD,CACAV,iBAAkBvB,KAAKuB,iBACvB7E,MAAO,CAACG,QAAqC,WAA5BmD,KAAKvB,MAAMwD,aAA4B,OAAS,gB,GA9FtDlB,a,iBCAbT,G,MAAY,SAAC,GAAmC,IAAjCwB,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OAAQD,GAAeC,GAAgB,MAASD,GAAeC,GAAgB,IAAMD,EAAc,IAAO,MA2D7FQ,E,uKAtDb,OACE,yBAAK7F,MAAM,iBACT,kBAAC,IAAD,CAAc8F,KAAK,iDACnB,yBAAK9F,MAAM,oBACT,kBAAC,IAAD,CAAMuC,GAAG,KACP,4BAAQvC,MAAM,eAAd,UAGJ,yBAAKA,MAAM,kBACT,uBAAGA,MAAM,QAAT,wMAGmB,kBAAC,IAAD,CAAiBkE,KAAMC,MAH1C,8CAIU,kBAAC,IAAD,CAAiBD,KAAME,MAJjC,oFAKuD,0BAAMpE,MAAM,gBAAZ,OALvD,MAQF,yBAAKA,MAAM,mBACT,kBAAC,IAAD,CACA0F,WAAW,EACX/B,SAAS,sDACTE,UAAWA,KAGb,yBACEI,GAAG,cACD,kBAAC,IAAD,CAAiBC,KAAMC,MACvB,mCACA,sCAIJ,yBAAKnE,MAAM,kBACT,uBAAGA,MAAM,QAAT,4FAEM,0BAAMA,MAAM,gBAAZ,SAFN,OAEiD,0BAAMA,MAAM,gBAAZ,SAFjD,gHAIY,0BAAMA,MAAM,gBAAZ,UAJZ,kFAKe,0BAAMA,MAAM,gBAAZ,oBALf,8DAQA,uBAAGA,MAAM,QAAT,8BAC6B,uBAAG8F,KAAK,wBAAR,WAD7B,oBAEK,uBAAGA,KAAK,8BAAR,kBAFL,QAEiE,uBAAGA,KAAK,sCAAR,YAFjE,8IAIkD,uBAAGA,KAAK,8CAAR,QAJlD,6CAK0C,uBAAGA,KAAK,gDAAR,qBAL1C,W,GA3CYxB,aCRdT,G,MAAY,SAAC,GAAmC,IAAjCwB,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OAAQD,GAAeC,GAAgB,MAASD,GAAeC,GAAgB,IAAMD,EAAc,IAAO,MAiD7FU,E,kDA7Cb,WAAYhG,GAAQ,IAAD,8BACjB,cAAMA,IAQR+E,iBAAmB,SAACvE,EAAaqD,GAC/B,EAAKpC,SAAS,CACZjB,YAAaA,EACbqD,aAAcA,KAZC,EAgBnBd,wBAA0B,SAACkD,GACzB,EAAKxE,SAAS,CACZwE,gBAAiBA,KAhBnB,EAAKhE,MAAQ,CACXzB,YAAa,QACbqD,cAAc,EACdoC,iBAAiB,GALF,E,qDAuBjB,OACE,6BACE,yBAAKhG,MAAM,oBACT,kBAAC,IAAD,CAAMuC,GAAG,KACP,4BAAQvC,MAAM,eAAd,UAGJ,kBAAC,EAAD,CACA8C,wBAAyBS,KAAKT,wBAC9BvC,YAAagD,KAAKvB,MAAMzB,YACxBqD,aAAcL,KAAKvB,MAAM4B,aACzBC,UAAWA,EACXhB,OAAO,IACP,kBAAC,EAAD,CACAiC,iBAAkBvB,KAAKuB,iBACvB7E,MAAO,CAAEgG,UAAW,IACpBb,SAAU7B,KAAKvB,MAAMgE,uB,GAxCN1B,aCUR4B,E,uKAZX,OACE,yBAAKlG,MAAM,mBACT,kBAAC,IAAD,CAAYmG,SAAS,KACnB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOc,KAAK,YAAYC,UAAWP,IACnC,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWT,U,GAPxBU,IAAMjC,WCKJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtF,QAAQsF,MAAMA,EAAMC,c","file":"static/js/main.db1e8ce2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Chessboard from \"chessboardjsx\";\r\nimport * as Chess from 'chess.js';\r\nimport PGNData from '../PGN/outfile.json';\r\nimport { faCircle as blackCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCircle as whiteCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport './Board.css';\r\n\r\nconst game = new Chess();\r\nconst orientations = ['white', 'black'];\r\n\r\nclass Board extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      fen: 'start', \r\n      randomGameIndex: 0, \r\n      randomMoveIndex: 0,\r\n      initMove: '',\r\n      initMoveData: {},\r\n      nextMove: '',\r\n      nextMoveData: {},\r\n      history: [],\r\n      nextMoveColor: '',\r\n      squareStyles: {},\r\n      answer: '',\r\n      correctMoves: 0,\r\n      time: 60,\r\n      timerCount: 0,\r\n      incorrect: false,\r\n      correct: false\r\n    }\r\n  }\r\n\r\n  /* ====================================== Lifecylcle Methods ====================================== */\r\n\r\n  componentDidMount() {\r\n    this.newPosition();\r\n\r\n    if(this.props.timed) {\r\n      this.interval = setInterval(() => this.setState({ timerCount: this.state.timerCount+1 }), 1000); // Start timer\r\n    \r\n      // Call callbackEnd once timer stops\r\n      setTimeout(() => {\r\n        const finalBoardProps = {\r\n          position: this.state.fen,\r\n          squareStyles: this.state.squareStyles,\r\n          allowDrag: () => false , \r\n          showNotation: this.props.showNotation,\r\n          orientation: this.props.orientation === 'random' ? this.state.orientation : this.props.orientation,\r\n          calcWidth: this.props.calcWidth,\r\n        }\r\n        this.props.callbackEnd(\r\n          this.state.correctMoves,\r\n          finalBoardProps)\r\n      }, this.state.time * 1000);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(!this.props.timed) {\r\n      if(this.props.orientation !== prevProps.orientation){\r\n        this.newPosition();\r\n      }\r\n    } \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if(this.props.timed) {\r\n      clearInterval(this.interval);\r\n    } \r\n  }\r\n\r\n  /* ====================================== Component Methods ====================================== */\r\n\r\n  // Generate new board position\r\n  newPosition = () => {\r\n    let orientation = null;\r\n    if (this.props.orientation === 'random'){\r\n      orientation = orientations[Math.floor(Math.random() * 2)];\r\n    } else {\r\n      orientation = this.props.orientation;\r\n    }\r\n    let randomGameIndex = Math.floor(Math.random() * PGNData.length);\r\n    game.load_pgn(PGNData[randomGameIndex].data);\r\n    let history = game.history();\r\n\r\n    // In case game was not played\r\n    if(history.length <= 2) {\r\n      while(history.length <= 2){\r\n        randomGameIndex = Math.floor(Math.random() * PGNData.length);\r\n        game.load_pgn(PGNData[randomGameIndex].data);\r\n        history = game.history();\r\n      }\r\n    }\r\n    game.reset();\r\n\r\n    // Initial half move must be the opposite color of orientation. Initial move cannot be last half move\r\n    let randomMoveIndex = (orientation === 'white') ? \r\n      Math.floor(Math.random() *  Math.floor((history.length - 3) / 2)) * 2 + 1: \r\n      Math.floor(Math.random() *  Math.floor((history.length - 2) / 2)) * 2;\r\n    \r\n    // Do not use castles as move\r\n    if (history[randomMoveIndex+1] === 'O-O' || history[randomMoveIndex+1] === 'O-O-O') {\r\n        randomMoveIndex = (randomMoveIndex - 2) % history.length;\r\n    }\r\n\r\n    const initMove = history[randomMoveIndex];\r\n    const nextMove = history[randomMoveIndex+1];\r\n\r\n    // Save lastFullMove for defining the nextMoveColor state (ensures color and nextMove render at the same time)\r\n    let i;\r\n    let lastFullMove = {};\r\n      for (i = 0; i < (randomMoveIndex); i++) {\r\n        lastFullMove = game.move(history[i]);\r\n    }\r\n    \r\n    this.setState({ \r\n      fen: game.fen(), \r\n      randomGameIndex: randomGameIndex,\r\n      randomMoveIndex: randomMoveIndex,\r\n      initMove: initMove,\r\n      initMoveData: {},\r\n      nextMove: nextMove,\r\n      nextMoveData: {},\r\n      nextMoveColor: '',\r\n      history: history,\r\n      nextMoveColor: lastFullMove.color === 'w' ? 'White' : 'Black',\r\n      squareStyles: {},\r\n      answer: '',\r\n      orientation: orientation\r\n    });\r\n\r\n    setTimeout(() => this.makeInitMove(), 100);\r\n    setTimeout(() => this.updateSquareStyling(), 800);\r\n  }\r\n\r\n  // For initMove animation\r\n  makeInitMove = () => {\r\n    const initMoveData =  game.move(this.state.initMove);\r\n    const nextMoveData = game.move(this.state.nextMove);\r\n    game.undo();\r\n    this.setState({ fen: game.fen(), initMoveData: initMoveData, nextMoveData: nextMoveData });\r\n  }\r\n\r\n  // For initMove colors\r\n  updateSquareStyling = () => {\r\n    console.log(this.state);\r\n    let squareStyles = {};\r\n    squareStyles[this.state.initMoveData.from] = {backgroundColor: 'rgba(0, 255, 0, 0.3)'};\r\n    squareStyles[this.state.initMoveData.to] = {backgroundColor: 'rgba(0, 255, 0, 0.3)'};\r\n    this.setState({ squareStyles: squareStyles });\r\n  }\r\n\r\n  // Validate user move input\r\n  onDrop = ({ sourceSquare, targetSquare, piece }) => {\r\n    if (this.state.nextMoveData.from === sourceSquare \r\n       && this.state.nextMoveData.to === targetSquare\r\n       && (this.state.nextMoveData.color + this.state.nextMoveData.piece.toUpperCase()) === piece) {\r\n        if(!this.props.timed) {\r\n          this.props.callbackDisableSettings(true);\r\n        }\r\n        game.move(this.state.nextMove); \r\n        this.setState({ \r\n          answer: 'correct', \r\n          fen: game.fen(), \r\n          correctMoves: this.state.correctMoves+1,\r\n          correct: true\r\n        });\r\n       } else if (sourceSquare === targetSquare) {\r\n        // Skip if piece is dropped onto original square\r\n       } else {\r\n         this.setState({ answer: 'incorrect', incorrect: true });\r\n       }\r\n  }\r\n\r\n  // Only allow correct colored pieces to be dragged\r\n  allowDrag = ({ piece }) => {\r\n    if (piece.charAt(0) === this.state.nextMoveData.color) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Wait for movePrompt animation to end\r\n  onAnimationEnd = () => {\r\n    if (this.state.correct) {\r\n      this.setState({ incorrect: false, correct: false });\r\n      this.newPosition();\r\n    }\r\n    this.setState({ incorrect: false, correct: false });\r\n\r\n    if(!this.props.timed) {\r\n      setTimeout(() => {\r\n        this.props.callbackDisableSettings(false)\r\n      }, 800);\r\n    }\r\n  }\r\n\r\n  /* ====================================== Render Function ====================================== */\r\n\r\n  render() {\r\n    const incorrect = this.state.incorrect;\r\n    const correct = this.state.correct;\r\n\r\n    return (\r\n      <div>\r\n        <Timer \r\n          time={this.state.time - this.state.timerCount} \r\n          display={this.props.timed ? 'block' : 'none'} />\r\n        <Chessboard\r\n          position={this.state.fen} \r\n          squareStyles={this.state.squareStyles}\r\n          onDrop={this.onDrop}\r\n          allowDrag={this.allowDrag} \r\n          showNotation={this.props.showNotation} \r\n          orientation={this.props.orientation === 'random' ? this.state.orientation : this.props.orientation}\r\n          calcWidth={this.props.calcWidth}\r\n          />\r\n        <div \r\n        id='movePrompt' >\r\n          {this.state.nextMoveColor === 'White' ? <FontAwesomeIcon icon={whiteCircle} /> : <FontAwesomeIcon icon={blackCircle} />}   \r\n          <span> </span>\r\n          <span \r\n          onAnimationEnd={this.onAnimationEnd}\r\n          className={incorrect ? 'incorrect' : (correct ? 'correct' : '')}>\r\n            {this.state.nextMove}\r\n            </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Timer(props) {\r\n  return (\r\n    <div \r\n      class=\"timer-container\" \r\n      style={props.time < 10 ? {color: 'red', display: props.display} : {display: props.display}} >\r\n      <div>{props.time}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport './Settings.css';\r\n\r\nclass Settings extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      orientation: 'white',\r\n      showNotation: false\r\n    };\r\n    this.onChangeOrientation = this.onChangeOrientation.bind(this);\r\n    this.onChangeNotation = this.onChangeNotation.bind(this);\r\n  }\r\n\r\n  onChangeOrientation(event) {\r\n    this.setState({ orientation: event.target.value }, () => {\r\n      this.props.callbackSettings(\r\n        this.state.orientation, \r\n        this.state.showNotation);\r\n    });\r\n  }\r\n\r\n  onChangeNotation(event) {\r\n    this.setState({ showNotation: event.target.checked }, () => {\r\n      this.props.callbackSettings(\r\n        this.state.orientation, \r\n        this.state.showNotation\r\n        );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"settingsContainer\" style={this.props.style} >\r\n        <div class=\"radio-group-container\" onChange={this.onChangeOrientation}>\r\n          <label class=\"radio-container\">White\r\n            <input type=\"radio\" value=\"white\" name=\"orientation\" defaultChecked disabled={this.props.disabled}/> \r\n            <span class=\"checkmark\"></span>\r\n          </label>\r\n          <label class=\"radio-container\">Black \r\n            <input type=\"radio\" value=\"black\" name=\"orientation\" disabled={this.props.disabled}/> \r\n            <span class=\"checkmark\"></span>\r\n          </label>\r\n          <label class=\"radio-container\">Random\r\n            <input type=\"radio\" value=\"random\" name=\"orientation\" disabled={this.props.disabled}/> \r\n            <span class=\"checkmark\"></span>\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"checkbox-group-container\">\r\n          <label class=\"checkbox-container\">Show Coordinates \r\n            <input type=\"checkbox\" onChange={this.onChangeNotation} disabled={this.props.disabled}/> \r\n            <span class=\"checkmark\"></span>\r\n          </label>\r\n        </div>   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Board from './Board';\r\nimport Settings from './Settings';\r\nimport Chessboard from 'chessboardjsx';\r\nimport './Home.css';\r\n\r\nconst calcWidth = ({ screenWidth, screenHeight }) => {\r\n  return (screenWidth || screenHeight) < 1800 ? ((screenWidth || screenHeight) < 550 ? screenWidth : 500) : 600;\r\n}\r\n  \r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentState: 'init',\r\n      orientation: 'white',\r\n      showNotation: false\r\n    }\r\n    this.handleStart = this.handleStart.bind(this);\r\n  }\r\n\r\n  renderSwitch(state) {\r\n    switch(state) {\r\n\r\n      case 'init': \r\n        return (\r\n          <div class=\"init-container\">\r\n            Chess Notation Trainer\r\n            <Chessboard \r\n            draggable={false}\r\n            position=\"start\" \r\n            orientation={this.state.orientation === 'random' ? 'white' : this.state.orientation} \r\n            showNotation={this.state.showNotation}\r\n            calcWidth={calcWidth}\r\n            />\r\n            <button class='start button' onClick={this.handleStart}>Start</button>|\r\n            <Link to='/practice'>\r\n              <button class='practice button'>Practice</button>\r\n            </Link>|\r\n            <Link to='/about'>\r\n              <button class='about button'>About</button>\r\n            </Link>\r\n          </div>\r\n        );\r\n\r\n      case 'active': \r\n        return (\r\n          <div>\r\n            <Board \r\n            callbackEnd={this.callbackEnd} \r\n            orientation={this.state.orientation} \r\n            showNotation={this.state.showNotation} \r\n            calcWidth={calcWidth}\r\n            timed={true} />\r\n          </div>\r\n        );\r\n\r\n      case 'ended': \r\n        return (\r\n          <div class=\"ended-container\" >\r\n            Score: {this.state.correctMoves} Moves\r\n            <Chessboard \r\n            {...this.state.finalBoardProps}\r\n            orientation={this.state.orientation === 'random' ? 'white' : this.state.orientation} \r\n            showNotation={this.state.showNotation} \r\n            calcWidth={calcWidth}\r\n            />\r\n            <button class='start button' onClick={this.handleStart}>Start</button>|\r\n            <Link to='/practice'>\r\n              <button class='practice button'>Practice</button>\r\n            </Link>|\r\n            <Link to='/about'>\r\n              <button class='about button'>About</button>\r\n            </Link>\r\n          </div>\r\n        );\r\n\r\n    }\r\n  }\r\n\r\n  handleStart(event) {\r\n    this.setState({ currentState: 'active' });\r\n  }\r\n\r\n  callbackEnd = (correctMoves, finalBoardProps) => {\r\n    this.setState({ \r\n      correctMoves: correctMoves, \r\n      finalBoardProps: finalBoardProps,\r\n      currentState: 'ended' });\r\n  }\r\n\r\n  callbackSettings = (orientation, showNotation) => {\r\n    this.setState({\r\n      orientation: orientation,\r\n      showNotation: showNotation\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.renderSwitch(this.state.currentState)}\r\n        <Settings \r\n        callbackSettings={this.callbackSettings} \r\n        style={{display: this.state.currentState === 'active' ? 'none' : 'block'}} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Chessboard from 'chessboardjsx';\r\nimport GithubCorner from 'react-github-corner';\r\nimport { faCircle as blackCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCircle as whiteCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport './About.css';\r\nimport './Board.css';\r\nimport '../App.css';\r\n\r\nconst calcWidth = ({ screenWidth, screenHeight }) => {\r\n  return (screenWidth || screenHeight) < 1800 ? ((screenWidth || screenHeight) < 550 ? screenWidth : 500) : 600;\r\n}\r\n\r\nclass About extends Component {\r\n  render() {\r\n  return (\r\n    <div class=\"top-container\">\r\n      <GithubCorner href=\"https://github.com/mattjliu/Notation-Trainer\" />\r\n      <div class='button-container'>\r\n        <Link to='/'>\r\n          <button class='back-button'>Back</button>\r\n        </Link>\r\n      </div>\r\n      <div class='text-container'>\r\n        <p class='text'>\r\n          This is a simple app that I created to help chess players learn and practice algebraic notation. \r\n          The app will generate a position on the board and prompt you to make a given move.\r\n          You will see the <FontAwesomeIcon icon={whiteCircle} /> icon if it's white's turn to move \r\n          and the <FontAwesomeIcon icon={blackCircle} /> icon if it's black's turn.\r\n          For example, in the board below, the correct move is <span class='special-font'>Bb5</span>.\r\n        </p>\r\n      </div>\r\n      <div class='board-container'>\r\n        <Chessboard \r\n        draggable={false}\r\n        position=\"r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R\"\r\n        calcWidth={calcWidth}\r\n        />\r\n      </div>\r\n      <div \r\n        id='movePrompt' >\r\n          <FontAwesomeIcon icon={whiteCircle} />\r\n          <span> </span>\r\n          <span>\r\n            Bb5\r\n          </span>\r\n      </div>\r\n      <div class='text-container'>\r\n        <p class='text'>\r\n          Your goal is to make as many correct moves as possible in 60 seconds. You can select \r\n          the <span class='special-font'>White</span> or <span class='special-font'>Black</span> options \r\n          to change the side of the prompted moves. This also changes the orientation of the board.\r\n          Selecting <span class='special-font'>Random</span> would make the board randomly alternate between white and black.\r\n          Checking the <span class='special-font'>Show Coordinates</span> option toggles the file and rank indicators on the board.\r\n        </p>\r\n\r\n        <p class='text'>\r\n          This app was created using <a href=\"https://reactjs.org/\">ReactJS</a> with the use \r\n          of <a href=\"https://chessboardjsx.com/\">Chessboard.jsx</a> and <a href=\"https://github.com/jhlywa/chess.js\">chess.js</a>.\r\n          The positions generated from the board are real positions from world championship games. \r\n          The PGN files from those events were downloaded <a href=\"https://www.pgnmentor.com/files.html#world\">here</a>.\r\n          You can also view the source code at my <a href=\"https://github.com/mattjliu/Notation-Trainer\">github repository</a>.\r\n        </p>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Board from './Board';\r\nimport Settings from './Settings';\r\nimport './Board.css';\r\nimport './Practice.css';\r\n\r\nconst calcWidth = ({ screenWidth, screenHeight }) => {\r\n  return (screenWidth || screenHeight) < 1800 ? ((screenWidth || screenHeight) < 550 ? screenWidth : 500) : 600;\r\n}\r\n\r\nclass Practice extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      orientation: 'white',\r\n      showNotation: false,\r\n      disableSettings: false\r\n    }\r\n  }\r\n\r\n  callbackSettings = (orientation, showNotation) => {\r\n    this.setState({\r\n      orientation: orientation,\r\n      showNotation: showNotation\r\n    });\r\n  }\r\n\r\n  callbackDisableSettings = (disableSettings) => {\r\n    this.setState({\r\n      disableSettings: disableSettings\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div class='button-container'>\r\n          <Link to='/'>\r\n            <button class='back-button'>Back</button>\r\n          </Link>\r\n        </div>\r\n        <Board \r\n        callbackDisableSettings={this.callbackDisableSettings}\r\n        orientation={this.state.orientation} \r\n        showNotation={this.state.showNotation} \r\n        calcWidth={calcWidth}\r\n        timed={false} />\r\n        <Settings \r\n        callbackSettings={this.callbackSettings}\r\n        style={{ marginTop: 15 }}\r\n        disabled={this.state.disableSettings} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Practice;","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\nimport Practice from './components/Practice';\r\n\r\nclass App extends React.Component {\r\n  render () {\r\n    return (\r\n      <div class=\"board-container\">\r\n        <HashRouter basename='/'>\r\n          <Route exact path='/' component={Home} />\r\n          <Route path='/practice' component={Practice} />\r\n          <Route path='/about' component={About} />\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}